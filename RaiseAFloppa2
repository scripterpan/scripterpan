repeat task.wait(0.25) until game:IsLoaded()
getgenv().Image = "rbxassetid://14670814118" --put a asset id in here to make it work
getgenv().ToggleUI = "LeftControl" -- This where you can Toggle the Fluent ui library

task.spawn(function()
    if not getgenv().LoadedMobileUI == true then getgenv().LoadedMobileUI = true
        local OpenUI = Instance.new("ScreenGui")
        local ImageButton = Instance.new("ImageButton")
        local UICorner = Instance.new("UICorner")
        OpenUI.Name = "OpenUI"
        OpenUI.Parent = game:GetService("CoreGui")
        OpenUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
        ImageButton.Parent = OpenUI
        ImageButton.BackgroundColor3 = Color3.fromRGB(105, 105, 105)
        ImageButton.BackgroundTransparency = 0.8
        ImageButton.Position = UDim2.new(0.9, 0, 0.1, 0)
        ImageButton.Size = UDim2.new(0, 50, 0, 50)
        ImageButton.Image = getgenv().Image
        ImageButton.Draggable = true
        ImageButton.Transparency = 1
        UICorner.CornerRadius = UDim.new(0, 200)
        UICorner.Parent = ImageButton
        ImageButton.MouseButton1Click:Connect(function()
            game:GetService("VirtualInputManager"):SendKeyEvent(true, getgenv().ToggleUI, false, game)
        end)
    end
end)

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Raise A Floppa 2 ",
    SubTitle = "By Pann",
    TabWidth = 160,
    Size = UDim2.fromOffset(480, 320),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

local Tabs = { 
      MAIN = Window:AddTab({ Title = "Main", Icon = "" }),
      Auto = Window:AddTab({ Title = "Automatic", Icon = ""}),
      Misc = Window:AddTab({ Title = "Misc", Icon = ""})
}

local Options = Fluent.Options

do
    Fluent:Notify({
        Title = "Notification",
        Content = "Script Is Loaded :3",
        SubContent = "Meow!!!", -- Optional
        Duration = 5 -- Set to nil to make the notification not disappear
    })
end


-- Meteorite Magnet Button in the Auto tab
local magnetCooldown = 0 -- Start with no cooldown
local magnetActivated = false -- To track if the magnet is activated or not

Tabs.Auto:AddButton({
    Title = "Activate Meteorite Magnet",
    Description = "Activate Meteorite Magnet if purchased",
    Callback = function()
        -- Function to check if Meteorite Magnet has been purchased
        local function hasMeteoriteMagnet()
            local meteoriteMagnet = workspace.Unlocks:FindFirstChild("Meteor Magnet")  -- Check if Meteor Magnet exists in Unlocks
            return meteoriteMagnet ~= nil  -- If the item is found, return true, else false
        end

        -- Target CFrame (the location you want to teleport to)
        local targetCFrame = CFrame.new(
            -46.8612709, 153.73613, -41.5506172, 
            0.00980880763, -1.16323498e-07, -0.999951899, 
            -1.84243714e-08, 1, -1.16509824e-07, 
            0.999951899, 1.95663077e-08, 0.00980880763
        )

        -- Function to teleport and activate the magnet
        local function teleportToTargetAndActivateMagnet()
            -- Save the original position
            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

            -- Save the original position
            local originalCFrame = humanoidRootPart.CFrame

            -- Teleport to the target position
            humanoidRootPart.CFrame = targetCFrame

            wait(1)

            keypress(0x45) -- Simulate pressing "E"
            magnetActivated = true -- Set magnet as activated

            -- Wait and then teleport back to the original position
            wait(2)
            humanoidRootPart.CFrame = originalCFrame
        end

        -- Main function to check and execute teleport and activation
        if hasMeteoriteMagnet() then
            if not magnetActivated then
                teleportToTargetAndActivateMagnet()
            end
        else
            Fluent:Notify({
                Title = "Meteorite Magnet Required",
                Content = "Meteorite Magnet has not been purchased.",
                SubContent = "You need to purchase Meteorite Magnet to use it!",
                Duration = 5
            })
        end
    end
})





-- DJ El Gato Toggle
local elGatoEnabled = false
local elGatoCooldown = 500 -- Cooldown in seconds
local lastActivated = 0
local targetElGatoCFrame = CFrame.new(-82.4485168, 72.5479126, -42.0264435, 1.257658e-05, 0.258770257, 0.965939045, 1.66893005e-06, -0.965939164, 0.258770257, 1.00000012, -1.66893005e-06, -1.28746033e-05)

local ToggleElGato = Tabs.Auto:AddToggle("Auto Activate DJ El Gato", {
    Title = "Toggle DJ El Gato",
    Default = false,
})

ToggleElGato:OnChanged(function()
    elGatoEnabled = ToggleElGato.Value -- Get the current toggle state

    -- Function to check if DJ El Gato has been purchased
    local function hasDJElGato()
        local djElGato = workspace.Unlocks:FindFirstChild("DJ El Gato")
        return djElGato and djElGato:FindFirstChild("El Gato") ~= nil
    end

    -- If the player has not purchased DJ El Gato, turn off the toggle automatically
    if not hasDJElGato() then
        ToggleElGato:SetValue(false)
        Fluent:Notify({
            Title = "DJ El Gato Required",
            Content = "You need to purchase DJ El Gato to use it!",
            Duration = 5
        })
        return
    end

    -- Handle the cooldown for DJ El Gato
    if elGatoEnabled then
        local currentTime = tick()
        if currentTime - lastActivated >= elGatoCooldown then
            lastActivated = currentTime

            -- Function to teleport and activate El Gato
            local function teleportToTargetAndActivateElGato()
                local player = game.Players.LocalPlayer
                local character = player.Character or player.CharacterAdded:Wait()
                local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

                -- Save the original position
                local originalCFrame = humanoidRootPart.CFrame

                -- Teleport to the target position
                humanoidRootPart.CFrame = targetElGatoCFrame
                wait(1)

                keypress(0x45) -- Simulate pressing "E"
                wait(2)

                -- Teleport back to the original position
                humanoidRootPart.CFrame = originalCFrame
            end

            teleportToTargetAndActivateElGato()
        else
            Fluent:Notify({
                Title = "Cooldown Active",
                Content = "DJ El Gato is still on cooldown.",
                Duration = 5
            })
            ToggleElGato:SetValue(false) -- Turn off the toggle if the cooldown is active
        end
    end
end)




local ToggleESP = Tabs.Misc:AddToggle("Players ESP", {
    Title = "Toggle Players ESP",
    Default = false,
})

ToggleESP:OnChanged(function()
    local espEnabled = ToggleESP.Value -- Get the current toggle state

    if espEnabled then
        local FillColor = Color3.fromRGB(0, 255, 0)  -- Green color for fill
        local DepthMode = "AlwaysOnTop"
        local FillTransparency = 0.5
        local OutlineColor = Color3.fromRGB(255, 255, 255)  -- White color for outline
        local OutlineTransparency = 0

        local CoreGui = game:FindService("CoreGui")
        local Players = game:FindService("Players")
        local connections = {}

        local highlightStorage = Instance.new("Folder")
        highlightStorage.Parent = CoreGui
        highlightStorage.Name = "Highlight_Storage"

        local function Highlight(plr)
            local Highlight = Instance.new("Highlight")
            Highlight.Name = plr.Name
            Highlight.FillColor = FillColor
            Highlight.DepthMode = DepthMode
            Highlight.FillTransparency = FillTransparency
            Highlight.OutlineColor = OutlineColor
            Highlight.OutlineTransparency = OutlineTransparency
            Highlight.Parent = highlightStorage

            local plrchar = plr.Character
            if plrchar then
                Highlight.Adornee = plrchar
            end

            connections[plr] = plr.CharacterAdded:Connect(function(char)
                Highlight.Adornee = char
            end)
        end

        for _, plr in next, Players:GetPlayers() do
            Highlight(plr)
        end

        Players.PlayerAdded:Connect(Highlight)

        Players.PlayerRemoving:Connect(function(plr)
            local plrname = plr.Name
            if highlightStorage[plrname] then
                highlightStorage[plrname]:Destroy()
            end
            if connections[plr] then
                connections[plr]:Disconnect()
            end
        end)
    else
        -- Remove ESP when disabled
        if highlightStorage then
            highlightStorage:ClearAllChildren()
        end
    end
end)










-- Proximity Prompt Toggle Script
local ProximityPromptService = game:GetService("ProximityPromptService")
local proximityConnection -- To store the connection

-- Function to enable/disable Proximity Prompt interactions
local function toggleProximityPrompt(enable)
    if enable then
        -- Connect to the event if enabled
        proximityConnection = ProximityPromptService.PromptButtonHoldBegan:Connect(function(prompt)
            fireproximityprompt(prompt)
        end)
    elseif proximityConnection then
        -- Disconnect the event if it was connected
        proximityConnection:Disconnect()
        proximityConnection = nil -- Reset the variable after disconnecting
    end
end

-- Toggle for Proximity Prompt in the UI
local ToggleProximity = Tabs.Misc:AddToggle("ProximityPromptToggle", {Title = "Toggle Instance Proximity Prompt", Default = false})

-- Handle the toggle state change
ToggleProximity:OnChanged(function()
    local isProximityOn = ToggleProximity.Value
    toggleProximityPrompt(isProximityOn)
end)


-- Initialize variables
local fullbrightEnabled = false
local lighting = game:GetService("Lighting")
local originalSettings = {
    Brightness = lighting.Brightness,
    ClockTime = lighting.ClockTime,
    Ambient = lighting.Ambient,
    OutdoorAmbient = lighting.OutdoorAmbient,
}

-- Function to enable Fullbright
local function enableFullbright()
    lighting.Brightness = 2
    lighting.ClockTime = 14 -- Set to daytime
    lighting.Ambient = Color3.new(1, 1, 1)
    lighting.OutdoorAmbient = Color3.new(1, 1, 1)
end

-- Function to disable Fullbright
local function disableFullbright()
    lighting.Brightness = originalSettings.Brightness
    lighting.ClockTime = originalSettings.ClockTime
    lighting.Ambient = originalSettings.Ambient
    lighting.OutdoorAmbient = originalSettings.OutdoorAmbient
end



-- Add toggle to the UI
local Toggle = Tabs.Misc:AddToggle("FullbrightToggle", { Title = "Enable Fullbright", Default = false })

-- Handle toggle state changes
Toggle:OnChanged(function()
    fullbrightEnabled = Toggle.Value
    

    if fullbrightEnabled then
        enableFullbright()
    else
        disableFullbright()
    end
end)


Tabs.Misc:AddSection("Player Misc")  




-- Initialize variables
local noclipEnabled = false

-- Function to toggle noclip
local function toggleNoclip(state)
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()

    if state then
        game:GetService("RunService").Stepped:Connect(function()
            if noclipEnabled then
                for _, v in pairs(character:GetDescendants()) do
                    if v:IsA("BasePart") and v.CanCollide then
                        v.CanCollide = false
                    end
                end
            end
        end)
    else
        for _, v in pairs(character:GetDescendants()) do
            if v:IsA("BasePart") then
                v.CanCollide = true
            end
        end
    end
end

-- Add toggle to the UI
local Toggle = Tabs.Misc:AddToggle("NoclipToggle", { Title = "Noclip", Default = false })

-- Handle toggle state changes
Toggle:OnChanged(function()
    noclipEnabled = Toggle.Value
    toggleNoclip(noclipEnabled)
end)


-- Initialize variables
local speedEnabled = false
local jumpEnabled = false
local desiredSpeed = 16 -- Default Roblox speed
local defaultSpeed = 16
local desiredJumpPower = 50 -- Default Roblox jump power
local defaultJumpPower = 50
local player = game.Players.LocalPlayer

-- Function to set player speed
local function setSpeed(speed)
    if player and player.Character and player.Character:FindFirstChild("Humanoid") then
        player.Character.Humanoid.WalkSpeed = speed
    end
end

-- Function to set player jump power
local function setJumpPower(jumpPower)
    if player and player.Character and player.Character:FindFirstChild("Humanoid") then
        player.Character.Humanoid.JumpPower = jumpPower
    end
end



-- Monitor respawn to ensure speed and jump power persist
player.CharacterAdded:Connect(function(character)
    -- Wait for the character to load
    repeat task.wait() until character:FindFirstChild("Humanoid")

    -- Reapply speed if the toggle is on
    if speedEnabled then
        setSpeed(desiredSpeed)
    end

    -- Reapply jump power if the toggle is on
    if jumpEnabled then
        setJumpPower(desiredJumpPower)
    end
end)

-- Toggle for Speed Control
local SpeedToggle = Tabs.Misc:AddToggle("SpeedToggle", { Title = "Enable Speed Control", Default = false })

SpeedToggle:OnChanged(function()
    speedEnabled = SpeedToggle.Value

    if speedEnabled then
        -- Apply the current desired speed and start the monitoring loop
        setSpeed(desiredSpeed)
        task.spawn(function()
            while speedEnabled do
                if player.Character and player.Character:FindFirstChild("Humanoid") then
                    if player.Character.Humanoid.WalkSpeed ~= desiredSpeed then
                        setSpeed(desiredSpeed)
                    end
                end
                task.wait(0.1)
            end
        end)
    else
-- Reset to default speed when toggled off
        setSpeed(defaultSpeed)
    end
end)

-- Slider for Speed Adjustment
local SpeedSlider = Tabs.Misc:AddSlider("SpeedSlider", {
    Title = "Player Speed",
    Description = "Adjust your walk speed",
    Default = 16,
    Min = 1,
    Max = 120, -- Increased max speed to 120
    Rounding = 0,
    Callback = function(Value)
        desiredSpeed = Value
        if speedEnabled then
            setSpeed(desiredSpeed)
        end
    end,
})
SpeedSlider:SetValue(16) -- Set initial value

-- Toggle for Jump Power Control
local JumpToggle = Tabs.Misc:AddToggle("JumpToggle", { Title = "Enable Jump Power", Default = false })

JumpToggle:OnChanged(function()
    jumpEnabled = JumpToggle.Value

    if jumpEnabled then
        -- Apply the current desired jump power
        setJumpPower(desiredJumpPower)
    else
        -- Reset to default jump power when toggled off
        setJumpPower(defaultJumpPower)
    end
end)

-- Slider for Jump Power Adjustment
local JumpPowerSlider = Tabs.Misc:AddSlider("JumpPowerSlider", {
    Title = "Jump Power",
    Description = "Adjust your jump power",
    Default = 50,
    Min = 1,
    Max = 200, -- Increased max jump power to 200
    Rounding = 0,
    Callback = function(Value)
        desiredJumpPower = Value
        if jumpEnabled then
            setJumpPower(desiredJumpPower)
        end
    end,
})
JumpPowerSlider:SetValue(50) -- Set initial value


