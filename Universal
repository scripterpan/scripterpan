repeat task.wait(0.25) until game:IsLoaded();
getgenv().Image = "rbxassetid://14670814118"; --put a asset id in here to make it work
getgenv().ToggleUI = "LeftControl" -- This where you can Toggle the Fluent ui library

task.spawn(function()
    if not getgenv().LoadedMobileUI == true then getgenv().LoadedMobileUI = true
        local OpenUI = Instance.new("ScreenGui");
        local ImageButton = Instance.new("ImageButton");
        local UICorner = Instance.new("UICorner");
        OpenUI.Name = "OpenUI";
        OpenUI.Parent = game:GetService("CoreGui");
        OpenUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling;
        ImageButton.Parent = OpenUI;
        ImageButton.BackgroundColor3 = Color3.fromRGB(105,105,105);
        ImageButton.BackgroundTransparency = 0.8
        ImageButton.Position = UDim2.new(0.9,0,0.1,0);
        ImageButton.Size = UDim2.new(0,50,0,50);
        ImageButton.Image = getgenv().Image;
        ImageButton.Draggable = true;
        ImageButton.Transparency = 1;
        UICorner.CornerRadius = UDim.new(0,200);
        UICorner.Parent = ImageButton;
        ImageButton.MouseButton1Click:Connect(function()
            game:GetService("VirtualInputManager"):SendKeyEvent(true,getgenv().ToggleUI,false,game);
        end)
    end
end)
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()


local Window = Fluent:CreateWindow({
    Title = "Universal ",
    SubTitle = "By Pann",
    TabWidth = 160,
    Size = UDim2.fromOffset(480, 320),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

local Tabs = {

    uni = Window:AddTab({ Title = "Universal Script", Icon = "" }),
    play = Window:AddTab({ Title = "Player", Icon = ""}),
    aim = Window:AddTab({ Title = "Aimbot", Icon = ""}),
    esp = Window:AddTab({ Title = "ESP", Icon = "" }),
    other = Window:AddTab({ Title = "Other", Icon = ""})
    
}

local Options = Fluent.Options

do

    Fluent:Notify({
        Title = "Pann",
        Content = "Script Is Loaded",
        SubContent = "Sigma", -- Optional
        Duration = 5 -- Set to nil to make the notification not disappear
    })
end



Tabs.uni:AddParagraph({
    Title = "Universal Script!",
    Content = "Sigma"
})


Tabs.uni:AddButton({
    Title = "Infinite yield",
    Description = "Best fe command script",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/edgeiy/infiniteyield/master/source"))()
    end
})


Tabs.uni:AddButton({
    Title = "Fly Gui",
    Description = "Best Fly Script",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/XNEOFF/FlyGuiV3/main/FlyGuiV3.txt"))()
    end
})




Tabs.uni:AddButton({
    Title = "Owl Hub",
    Description = "Support a lot of roblox FPS game like arsenal",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/CriShoux/OwlHub/master/OwlHub.txt"))();
    end
})



Tabs.uni:AddButton({
    Title = "Dex V4 Mobile",
    Description = "Dark Dex V4 Mobile (No key) Credits to Yume Hub",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Artifacttx/YumeHub/refs/heads/main/Universal/DarkDex_Mobile", true))()
    end
})




local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

local Toggle = Tabs.play:AddToggle("MyToggle", {Title = "Noclip", Default = false})
local noclipConnection
local originalCollisions = {}

-- Save the character's current collision states
local function saveOriginalCollisions()
    originalCollisions = {}
    if LocalPlayer.Character then
        for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                originalCollisions[part] = part.CanCollide
            end
        end
    end
end

saveOriginalCollisions() -- << ADD THIS after defining the function!

-- Apply noclip (force CanCollide false)
local function startNoclip()
    if noclipConnection then
        noclipConnection:Disconnect()
    end

    saveOriginalCollisions()

    noclipConnection = RunService.Stepped:Connect(function()
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                end
            end
        end
    end)
end

-- Restore original collision
local function stopNoclip()
    if noclipConnection then
        noclipConnection:Disconnect()
        noclipConnection = nil
    end
    for part, canCollide in pairs(originalCollisions) do
        if part and part:IsA("BasePart") then
            part.CanCollide = canCollide
        end
    end
    originalCollisions = {}
end

-- When toggle is changed
Toggle:OnChanged(function()
    if Toggle.Value then
        startNoclip()
    else
        stopNoclip()
    end
end)

-- Handle respawn
LocalPlayer.CharacterAdded:Connect(function()
    repeat task.wait() until LocalPlayer.Character:FindFirstChild("Humanoid")
    saveOriginalCollisions()

    if Toggle.Value then
        startNoclip()
    end
end)

Toggle:SetValue(false)


-- Initialize variables
local speedEnabled = false
local jumpEnabled = false
local desiredSpeed = 16 -- Default Roblox speed
local defaultSpeed = 16
local desiredJumpPower = 50 -- Default Roblox jump power
local defaultJumpPower = 50
local player = game.Players.LocalPlayer

-- Function to set player speed
local function setSpeed(speed)
    if player and player.Character and player.Character:FindFirstChild("Humanoid") then
        player.Character.Humanoid.WalkSpeed = speed
    end
end

-- Function to set player jump power
local function setJumpPower(jumpPower)
    if player and player.Character and player.Character:FindFirstChild("Humanoid") then
        player.Character.Humanoid.JumpPower = jumpPower
    end
end



-- Monitor respawn to ensure speed and jump power persist
player.CharacterAdded:Connect(function(character)
    -- Wait for the character to load
    repeat task.wait() until character:FindFirstChild("Humanoid")

    -- Reapply speed if the toggle is on
    if speedEnabled then
        setSpeed(desiredSpeed)
    end

    -- Reapply jump power if the toggle is on
    if jumpEnabled then
        setJumpPower(desiredJumpPower)
    end
end)

-- Toggle for Speed Control
local SpeedToggle = Tabs.play:AddToggle("SpeedToggle", { Title = "Player Speed Boost", Default = false })

SpeedToggle:OnChanged(function()
    speedEnabled = SpeedToggle.Value

    if speedEnabled then
        -- Apply the current desired speed and start the monitoring loop
        setSpeed(desiredSpeed)
        task.spawn(function()
            while speedEnabled do
                if player.Character and player.Character:FindFirstChild("Humanoid") then
                    if player.Character.Humanoid.WalkSpeed ~= desiredSpeed then
                        setSpeed(desiredSpeed)
                    end
                end
                task.wait(0.1)
            end
        end)
    else
-- Reset to default speed when toggled off
        setSpeed(defaultSpeed)
    end
end)

-- Slider for Speed Adjustment
local SpeedSlider = Tabs.play:AddSlider("SpeedSlider", {
    Title = "Player Speed",
    Description = "Adjust your walk speed",
    Default = 16,
    Min = 1,
    Max = 120, -- Increased max speed to 120
    Rounding = 0,
    Callback = function(Value)
        desiredSpeed = Value
        if speedEnabled then
            setSpeed(desiredSpeed)
        end
    end,
})
SpeedSlider:SetValue(16) -- Set initial value

-- Toggle for Jump Power Control
local JumpToggle = Tabs.play:AddToggle("JumpToggle", { Title = "Jump Boost", Default = false })

JumpToggle:OnChanged(function()
    jumpEnabled = JumpToggle.Value

    if jumpEnabled then
        -- Apply the current desired jump power
        setJumpPower(desiredJumpPower)
    else
        -- Reset to default jump power when toggled off
        setJumpPower(defaultJumpPower)
    end
end)

-- Slider for Jump Power Adjustment
local JumpPowerSlider = Tabs.play:AddSlider("JumpPowerSlider", {
    Title = "Jump Power",
    Description = "Adjust your jump power",
    Default = 50,
    Min = 1,
    Max = 200, -- Increased max jump power to 200
    Rounding = 0,
    Callback = function(Value)
        desiredJumpPower = Value
        if jumpEnabled then
            setJumpPower(desiredJumpPower)
        end
    end,
})
JumpPowerSlider:SetValue(50) -- Set initial value





Tabs.esp:AddButton({
    Title = "Players ESP",
    Description = "This one was made by Amity on YT \n go subscribe to him",
    Callback = function()
        local FillColor = Color3.fromRGB(175,25,255)
local DepthMode = "AlwaysOnTop"
local FillTransparency = 0.5
local OutlineColor = Color3.fromRGB(255,255,255)
local OutlineTransparency = 0
 
local CoreGui = game:FindService("CoreGui")
local Players = game:FindService("Players")
local lp = Players.LocalPlayer
local connections = {}
 
local Storage = Instance.new("Folder")
Storage.Parent = CoreGui
Storage.Name = "Highlight_Storage"
 
local function Highlight(plr)
    local Highlight = Instance.new("Highlight")
    Highlight.Name = plr.Name
    Highlight.FillColor = FillColor
    Highlight.DepthMode = DepthMode
    Highlight.FillTransparency = FillTransparency
    Highlight.OutlineColor = OutlineColor
    Highlight.OutlineTransparency = 0
    Highlight.Parent = Storage
 
    local plrchar = plr.Character
    if plrchar then
        Highlight.Adornee = plrchar
    end
 
    connections[plr] = plr.CharacterAdded:Connect(function(char)
        Highlight.Adornee = char
    end)
end
 
Players.PlayerAdded:Connect(Highlight)
for i,v in next, Players:GetPlayers() do
    Highlight(v)
end
 
Players.PlayerRemoving:Connect(function(plr)
    local plrname = plr.Name
    if Storage[plrname] then
        Storage[plrname]:Destroy()
    end
    if connections[plr] then
        connections[plr]:Disconnect()
    end
end)
end
})



Tabs.esp:AddSection("ESP settings")


-- Place this code in your LocalScript

-- Assuming you're using Fluent UI library
local Toggle = Tabs.esp:AddToggle("MyToggle", {Title = "Tracer ESP", Default = false})

-- Create the ESP functionality with a Beam (line)
local function createTracer(player)
    -- Create the part that will act as the start point for the beam (the player's position)
    local startPart = Instance.new("Part")
    startPart.Size = Vector3.new(1, 1, 1)
    startPart.Anchored = true
    startPart.CanCollide = false
    startPart.Transparency = 1  -- Invisible part, just for the beam
    startPart.Parent = game.Workspace

    -- Create the beam that will be used as the tracer line
    local beam = Instance.new("Beam")
    beam.Color = ColorSequence.new(Color3.fromRGB(255, 0, 0))  -- Red color for the line
    beam.Width0 = 0.2  -- Starting thickness of the beam
    beam.Width1 = 0.2  -- Ending thickness of the beam
    beam.Attachment0 = Instance.new("Attachment")  -- Create attachment points for the beam
    beam.Attachment1 = Instance.new("Attachment")
    beam.Attachment0.Parent = startPart
    beam.Parent = startPart

    -- Create a part at the player's head (target point for the beam)
    local targetPart = Instance.new("Part")
    targetPart.Size = Vector3.new(1, 1, 1)
    targetPart.Anchored = true
    targetPart.CanCollide = false
    targetPart.Transparency = 1  -- Invisible part, just for the beam to attach to
    targetPart.Parent = game.Workspace

    -- Create attachment for the target part
    local targetAttachment = Instance.new("Attachment")
    targetAttachment.Parent = targetPart
    beam.Attachment1 = targetAttachment  -- Attach the beam to the target

    -- Update the target position and beam visibility
    game:GetService("RunService").RenderStepped:Connect(function()
        if Toggle.Value then
            -- Make sure the target part is updated to the player's head position
            if player.Character and player.Character:FindFirstChild("Head") then
                targetPart.Position = player.Character.Head.Position
            end

            -- Ensure the start part is at the local player's position
            startPart.Position = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
        else
            startPart:Destroy()  -- Remove the start part and the beam if toggle is off
            targetPart:Destroy()
        end
    end)
end

-- Monitor the players in the game
game:GetService("Players").PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        createTracer(player)
    end)
end)

-- Toggle the tracer on/off when the toggle changes
Toggle:OnChanged(function()
    -- No additional functionality is needed here
end)






Tabs.other:AddSection("Misc")



-- Proximity Prompt Toggle Script
local ProximityPromptService = game:GetService("ProximityPromptService")
local proximityConnection -- To store the connection

-- Function to enable/disable Proximity Prompt interactions
local function toggleProximityPrompt(enable)
    if enable then
        -- Connect to the event if enabled
        proximityConnection = ProximityPromptService.PromptButtonHoldBegan:Connect(function(prompt)
            fireproximityprompt(prompt)
        end)
    elseif proximityConnection then
        -- Disconnect the event if it was connected
        proximityConnection:Disconnect()
        proximityConnection = nil -- Reset the variable after disconnecting
    end
end

-- Toggle for Proximity Prompt in the UI
local ToggleProximity = Tabs.other:AddToggle("ProximityPromptToggle", {Title = "Instant Interact", Default = false})

-- Handle the toggle state change
ToggleProximity:OnChanged(function()
    local isProximityOn = ToggleProximity.Value
    toggleProximityPrompt(isProximityOn)
end)


-- Initialize variables
local fullbrightEnabled = false
local lighting = game:GetService("Lighting")
local originalSettings = {
    Brightness = lighting.Brightness,
    ClockTime = lighting.ClockTime,
    Ambient = lighting.Ambient,
    OutdoorAmbient = lighting.OutdoorAmbient,
}

-- Function to enable Fullbright
local function enableFullbright()
    lighting.Brightness = 2
    lighting.ClockTime = 14 -- Set to daytime
    lighting.Ambient = Color3.new(1, 1, 1)
    lighting.OutdoorAmbient = Color3.new(1, 1, 1)
end

-- Function to disable Fullbright
local function disableFullbright()
    lighting.Brightness = originalSettings.Brightness
    lighting.ClockTime = originalSettings.ClockTime
    lighting.Ambient = originalSettings.Ambient
    lighting.OutdoorAmbient = originalSettings.OutdoorAmbient
end

-- Add toggle to the UI
local Toggle = Tabs.other:AddToggle("FullbrightToggle", { Title = "Fullbright", Default = false })

-- Handle toggle state changes
Toggle:OnChanged(function()
    fullbrightEnabled = Toggle.Value
    

    if fullbrightEnabled then
        enableFullbright()
    else
        disableFullbright()
    end
end)
