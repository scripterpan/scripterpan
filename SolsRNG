repeat task.wait(0.25) until game:IsLoaded();
getgenv().Image = "rbxassetid://14670814118"; --put a asset id in here to make it work
getgenv().ToggleUI = "LeftControl" -- This where you can Toggle the Fluent ui library

task.spawn(function()
    if not getgenv().LoadedMobileUI == true then getgenv().LoadedMobileUI = true
        local OpenUI = Instance.new("ScreenGui");
        local ImageButton = Instance.new("ImageButton");
        local UICorner = Instance.new("UICorner");
        OpenUI.Name = "OpenUI";
        OpenUI.Parent = game:GetService("CoreGui");
        OpenUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling;
        ImageButton.Parent = OpenUI;
        ImageButton.BackgroundColor3 = Color3.fromRGB(105,105,105);
        ImageButton.BackgroundTransparency = 0.8
        ImageButton.Position = UDim2.new(0.9,0,0.1,0);
        ImageButton.Size = UDim2.new(0,50,0,50);
        ImageButton.Image = getgenv().Image;
        ImageButton.Draggable = true;
        ImageButton.Transparency = 1;
        UICorner.CornerRadius = UDim.new(0,200);
        UICorner.Parent = ImageButton;
        ImageButton.MouseButton1Click:Connect(function()
            game:GetService("VirtualInputManager"):SendKeyEvent(true,getgenv().ToggleUI,false,game);
        end)
    end
end)
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()


local Window = Fluent:CreateWindow({
    Title = "Sol's RNG ",
    SubTitle = "By Pann",
    TabWidth = 160,
    Size = UDim2.fromOffset(480, 320),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

local Tabs = {

    MISC = Window:AddTab({ Title = "Misc", Icon = "" }),
    MAIN = Window:AddTab({ Title = "Main", Icon = ""}),
    VISUAL = Window:AddTab({ Title = "Visual", Icon = ""}),
    HOOK = Window:AddTab({ Title = "Webhook", Icon = ""}),
    Cre = Window:AddTab({ Title = "Credit", Icon = ""}),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

do

Tabs.MISC:AddSection("Misc")

Tabs.MISC:AddButton({
    Title = "Players ESP",
    Description = "Self Explained (Can't be toggle because im lazy to makeit)",
    Callback = function()
        local FillColor = Color3.fromRGB(175,25,255)
        local DepthMode = "AlwaysOnTop"
        local FillTransparency = 0.5
        local OutlineColor = Color3.fromRGB(255,255,255)
        local OutlineTransparency = 0

        local CoreGui = game:FindService("CoreGui")
        local Players = game:FindService("Players")
        local lp = Players.LocalPlayer
        local connections = {}

        local Storage = Instance.new("Folder")
        Storage.Parent = CoreGui
        Storage.Name = "Highlight_Storage"

        local function Highlight(plr)
            local Highlight = Instance.new("Highlight")
            Highlight.Name = plr.Name
            Highlight.FillColor = FillColor
            Highlight.DepthMode = DepthMode
            Highlight.FillTransparency = FillTransparency
            Highlight.OutlineColor = OutlineColor
            Highlight.OutlineTransparency = 0
            Highlight.Parent = Storage

            local plrchar = plr.Character
            if plrchar then
                Highlight.Adornee = plrchar
            end

            connections[plr] = plr.CharacterAdded:Connect(function(char)
                Highlight.Adornee = char
            end)
        end

        Players.PlayerAdded:Connect(Highlight)
        for i,v in next, Players:GetPlayers() do
            Highlight(v)
        end

        Players.PlayerRemoving:Connect(function(plr)
            local plrname = plr.Name
            if Storage[plrname] then
                Storage[plrname]:Destroy()
            end
            if connections[plr] then
                connections[plr]:Disconnect()
            end
        end)
    end
})
end



-- Proximity Prompt Toggle Script
local ProximityPromptService = game:GetService("ProximityPromptService")
local proximityConnection -- To store the connection

-- Function to enable/disable Proximity Prompt interactions
local function toggleProximityPrompt(enable)
    if enable then
        -- Connect to the event if enabled
        proximityConnection = ProximityPromptService.PromptButtonHoldBegan:Connect(function(prompt)
            fireproximityprompt(prompt)
        end)
    elseif proximityConnection then
        -- Disconnect the event if it was connected
        proximityConnection:Disconnect()
        proximityConnection = nil -- Reset the variable after disconnecting
    end
end

-- Toggle for Proximity Prompt in the UI
local ToggleProximity = Tabs.MISC:AddToggle("ProximityPromptToggle", {Title = "Instance ProximityPrompt", Default = false})

-- Handle the toggle state change
ToggleProximity:OnChanged(function()
    local isProximityOn = ToggleProximity.Value
    toggleProximityPrompt(isProximityOn)
end)


-- Initialize variables
local fullbrightEnabled = false
local lighting = game:GetService("Lighting")
local originalSettings = {
    Brightness = lighting.Brightness,
    ClockTime = lighting.ClockTime,
    Ambient = lighting.Ambient,
    OutdoorAmbient = lighting.OutdoorAmbient,
}

-- Function to enable Fullbright
local function enableFullbright()
    lighting.Brightness = 2
    lighting.ClockTime = 14 -- Set to daytime
    lighting.Ambient = Color3.new(1, 1, 1)
    lighting.OutdoorAmbient = Color3.new(1, 1, 1)
end

-- Function to disable Fullbright
local function disableFullbright()
    lighting.Brightness = originalSettings.Brightness
    lighting.ClockTime = originalSettings.ClockTime
    lighting.Ambient = originalSettings.Ambient
    lighting.OutdoorAmbient = originalSettings.OutdoorAmbient
end

-- Add toggle to the UI
local Toggle = Tabs.MISC:AddToggle("FullbrightToggle", { Title = "Fullbright", Default = false })

-- Handle toggle state changes
Toggle:OnChanged(function()
    fullbrightEnabled = Toggle.Value
    

    if fullbrightEnabled then
        enableFullbright()
    else
        disableFullbright()
    end
end)








Tabs.MISC:AddSection("Player Misc")  












-- Player Speed Toggle and Slider

-- Player Speed Toggle and Slider with Input
local speedEnabled = false
local desiredSpeed = 16 -- Default speed
local defaultSpeed = 16 -- Default Roblox speed
local player = game.Players.LocalPlayer

-- Function to set player speed
local function setSpeed(speed)
    if player and player.Character and player.Character:FindFirstChild("Humanoid") then
        player.Character.Humanoid.WalkSpeed = speed
    end
end

-- Monitor speed to ensure it persists
local function monitorSpeed()
    while speedEnabled do
        if player and player.Character and player.Character:FindFirstChild("Humanoid") then
            if player.Character.Humanoid.WalkSpeed ~= desiredSpeed then
                setSpeed(desiredSpeed)
            end
        end
        task.wait(0.1)
    end
end

-- Speed Toggle
local SpeedToggle = Tabs.MISC:AddToggle("SpeedToggle", { Title = "Enable Player Speed", Default = false })
SpeedToggle:OnChanged(function()
    speedEnabled = SpeedToggle.Value
    if speedEnabled then
        task.spawn(monitorSpeed)
    else
        -- Reset to default speed when toggle is off
        setSpeed(defaultSpeed)
    end
end)

-- Speed Slider
local SpeedSlider = Tabs.MISC:AddSlider("SpeedSlider", {
    Title = "Player Speed",
    Description = "Adjust your walk speed",
    Default = 16,
    Min = 1,
    Max = 20,
    Rounding = 0,
    Callback = function(Value)
        desiredSpeed = Value
        if speedEnabled then
            setSpeed(desiredSpeed)
        end
    end,
})
SpeedSlider:SetValue(16)

-- Speed Input
local SpeedInput = Tabs.MISC:AddInput("SpeedInput", {
    Title = "Set Speed",
    Placeholder = "Enter speed (1-20)",
    Numeric = true,
    Finished = true, -- Callback triggers when Enter is pressed
    Callback = function(Value)
        local inputSpeed = tonumber(Value)
        if inputSpeed and inputSpeed >= 1 and inputSpeed <= 20 then
            desiredSpeed = inputSpeed
            SpeedSlider:SetValue(inputSpeed)
            if speedEnabled then
                setSpeed(desiredSpeed)
            end
        end
    end,
})

-- Monitor respawn to ensure speed persists
player.CharacterAdded:Connect(function(character)
    if speedEnabled then
        repeat task.wait() until character:FindFirstChild("Humanoid")
        setSpeed(desiredSpeed)
    end
end)

-- Jump Power Toggle and Slider with Input
local jumpEnabled = false
local defaultJumpPower = 50 -- Default Roblox jump power

-- Jump Power Toggle
local JumpToggle = Tabs.MISC:AddToggle("JumpToggle", { Title = "Enable Jump Power", Default = false })
JumpToggle:OnChanged(function()
    jumpEnabled = JumpToggle.Value
    if jumpEnabled then
        if player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.JumpPower = defaultJumpPower
        end
    else
        -- Reset to default jump power when toggle is off
        if player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.JumpPower = defaultJumpPower
        end
    end
end)

-- Jump Power Slider
local JumpSlider = Tabs.MISC:AddSlider("JumpPowerSlider", {
    Title = "Jump Power",
    Description = "Adjust your jump power",
    Default = 50,
    Min = 1,
    Max = 60,
    Rounding = 0,
    Callback = function(Value)
        if jumpEnabled and player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.JumpPower = Value
        end
    end,
})
JumpSlider:SetValue(50)

-- Jump Power Input
local JumpInput = Tabs.MISC:AddInput("JumpInput", {
    Title = "Set Jump Power",
    Placeholder = "Enter jump power (1-60)",
    Numeric = true,
    Finished = true,
    Callback = function(Value)
        local inputJumpPower = tonumber(Value)
        if inputJumpPower and inputJumpPower >= 1 and inputJumpPower <= 60 then
            JumpSlider:SetValue(inputJumpPower)
            if jumpEnabled and player.Character and player.Character:FindFirstChild("Humanoid") then
                player.Character.Humanoid.JumpPower = inputJumpPower
            end
        end
    end,
})





Tabs.HOOK:AddSection("Webhook")

local webhookUrl = ""
local webhookTimer = 600 -- Default to 1 minute in seconds
local webhookEnabled = false
local discordId = "" -- To store the Discord ID to ping



-- Input to change the webhook URL
local InputURL = Tabs.HOOK:AddInput("WebhookInput", {
    Title = "Webhook URL",
    Default = "",
    Placeholder = "Enter your webhook URL",
    Numeric = false,
    Finished = false,
    Callback = function(Value)
        webhookUrl = Value
    end
})

InputURL:OnChanged(function(Value)
    webhookUrl = Value
end)

-- Input to add your Discord ID
local InputDiscordID = Tabs.HOOK:AddInput("DiscordIDInput", {
    Title = "Discord ID",
    Default = "",
    Placeholder = "Enter your Discord ID",
    Numeric = true,
    Finished = false,
    Callback = function(Value)
        discordId = Value
    end
})

InputDiscordID:OnChanged(function(Value)
    discordId = Value
end)

-- Input to change the delay time
local InputDelay = Tabs.HOOK:AddInput("DelayInput", {
    Title = "Interval (Seconds)",
    Default = "7200",
    Placeholder = "Enter interval in seconds",
    Numeric = true,
    Finished = false,
    Callback = function(Value)
        local numValue = tonumber(Value)
        if numValue and numValue > 0 then
            webhookTimer = numValue
        end
    end
})

InputDelay:OnChanged(function(Value)
    local numValue = tonumber(Value)
    if numValue and numValue > 0 then
        webhookTimer = numValue
    end
end)

-- Toggle to activate/deactivate webhook sending
local Toggle = Tabs.HOOK:AddToggle("WebhookToggle", { Title = "Enable Webhook", Default = false })

Toggle:OnChanged(function()
    webhookEnabled = Toggle.Value
    if webhookEnabled then
        task.spawn(function()
            while webhookEnabled do
                if webhookUrl ~= "" then
                    local content = discordId ~= "" and ("<@" .. discordId .. ">") or "Webhook sent successfully!"
                    local data = {
                        ["content"] = content,
                        ["embeds"] = {{
                            ["title"] = "Sol's RNG Eon1",
                            ["description"] = "Webhook activated!",
                            ["color"] = 65280, -- Green color
                            ["fields"] = {
                                {
                                    ["name"] = "⏰ Time:",
                                    ["value"] = os.date("!%a %b %d %X %Y", os.time() + 7 * 3600) -- GMT+7 timezone
                                }
                            }
                        }}
                    }

                    local jsonData = game:GetService("HttpService"):JSONEncode(data)
                    request({
                        Url = webhookUrl,
                        Method = "POST",
                     repeat task.wait(0.25) until game:IsLoaded();
getgenv().Image = "rbxassetid://14670814118"; --put a asset id in here to make it work
getgenv().ToggleUI = "LeftControl" -- This where you can Toggle the Fluent ui library

task.spawn(function()
    if not getgenv().LoadedMobileUI == true then getgenv().LoadedMobileUI = true
        local OpenUI = Instance.new("ScreenGui");
        local ImageButton = Instance.new("ImageButton");
        local UICorner = Instance.new("UICorner");
        OpenUI.Name = "OpenUI";
        OpenUI.Parent = game:GetService("CoreGui");
        OpenUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling;
        ImageButton.Parent = OpenUI;
        ImageButton.BackgroundColor3 = Color3.fromRGB(105,105,105);
        ImageButton.BackgroundTransparency = 0.8
        ImageButton.Position = UDim2.new(0.9,0,0.1,0);
        ImageButton.Size = UDim2.new(0,50,0,50);
        ImageButton.Image = getgenv().Image;
        ImageButton.Draggable = true;
        ImageButton.Transparency = 1;
        UICorner.CornerRadius = UDim.new(0,200);
        UICorner.Parent = ImageButton;
        ImageButton.MouseButton1Click:Connect(function()
            game:GetService("VirtualInputManager"):SendKeyEvent(true,getgenv().ToggleUI,false,game);
        end)
    end
end)
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()


local Window = Fluent:CreateWindow({
    Title = "Sol's RNG ",
    SubTitle = "By Pann",
    TabWidth = 160,
    Size = UDim2.fromOffset(480, 320),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

local Tabs = {

    MISC = Window:AddTab({ Title = "Misc", Icon = "" }),
    MAIN = Window:AddTab({ Title = "Main", Icon = ""}),
    VISUAL = Window:AddTab({ Title = "Visual", Icon = ""}),
    HOOK = Window:AddTab({ Title = "Webhook", Icon = ""}),
    Cre = Window:AddTab({ Title = "Credit", Icon = ""}),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

do

Tabs.MISC:AddButton({
    Title = "Players ESP",
    Description = "Self Explained (Can't be toggle because im lazy to makeit)",
    Callback = function()
        local FillColor = Color3.fromRGB(175,25,255)
        local DepthMode = "AlwaysOnTop"
        local FillTransparency = 0.5
        local OutlineColor = Color3.fromRGB(255,255,255)
        local OutlineTransparency = 0

        local CoreGui = game:FindService("CoreGui")
        local Players = game:FindService("Players")
        local lp = Players.LocalPlayer
        local connections = {}

        local Storage = Instance.new("Folder")
        Storage.Parent = CoreGui
        Storage.Name = "Highlight_Storage"

        local function Highlight(plr)
            local Highlight = Instance.new("Highlight")
            Highlight.Name = plr.Name
            Highlight.FillColor = FillColor
            Highlight.DepthMode = DepthMode
            Highlight.FillTransparency = FillTransparency
            Highlight.OutlineColor = OutlineColor
            Highlight.OutlineTransparency = 0
            Highlight.Parent = Storage

            local plrchar = plr.Character
            if plrchar then
                Highlight.Adornee = plrchar
            end

            connections[plr] = plr.CharacterAdded:Connect(function(char)
                Highlight.Adornee = char
            end)
        end

        Players.PlayerAdded:Connect(Highlight)
        for i,v in next, Players:GetPlayers() do
            Highlight(v)
        end

        Players.PlayerRemoving:Connect(function(plr)
            local plrname = plr.Name
            if Storage[plrname] then
                Storage[plrname]:Destroy()
            end
            if connections[plr] then
                connections[plr]:Disconnect()
            end
        end)
    end
})
end



-- Proximity Prompt Toggle Script
local ProximityPromptService = game:GetService("ProximityPromptService")
local proximityConnection -- To store the connection

-- Function to enable/disable Proximity Prompt interactions
local function toggleProximityPrompt(enable)
    if enable then
        -- Connect to the event if enabled
        proximityConnection = ProximityPromptService.PromptButtonHoldBegan:Connect(function(prompt)
            fireproximityprompt(prompt)
        end)
    elseif proximityConnection then
        -- Disconnect the event if it was connected
        proximityConnection:Disconnect()
        proximityConnection = nil -- Reset the variable after disconnecting
    end
end

-- Toggle for Proximity Prompt in the UI
local ToggleProximity = Tabs.MISC:AddToggle("ProximityPromptToggle", {Title = "Instance ProximityPrompt", Default = false})

-- Handle the toggle state change
ToggleProximity:OnChanged(function()
    local isProximityOn = ToggleProximity.Value
    toggleProximityPrompt(isProximityOn)
end)


-- Initialize variables
local fullbrightEnabled = false
local lighting = game:GetService("Lighting")
local originalSettings = {
    Brightness = lighting.Brightness,
    ClockTime = lighting.ClockTime,
    Ambient = lighting.Ambient,
    OutdoorAmbient = lighting.OutdoorAmbient,
}

-- Function to enable Fullbright
local function enableFullbright()
    lighting.Brightness = 2
    lighting.ClockTime = 14 -- Set to daytime
    lighting.Ambient = Color3.new(1, 1, 1)
    lighting.OutdoorAmbient = Color3.new(1, 1, 1)
end

-- Function to disable Fullbright
local function disableFullbright()
    lighting.Brightness = originalSettings.Brightness
    lighting.ClockTime = originalSettings.ClockTime
    lighting.Ambient = originalSettings.Ambient
    lighting.OutdoorAmbient = originalSettings.OutdoorAmbient
end

-- Add toggle to the UI
local Toggle = Tabs.MISC:AddToggle("FullbrightToggle", { Title = "Fullbright", Default = false })

-- Handle toggle state changes
Toggle:OnChanged(function()
    fullbrightEnabled = Toggle.Value
    

    if fullbrightEnabled then
        enableFullbright()
    else
        disableFullbright()
    end
end)








Tabs.MISC:AddSection("Player Misc")  












-- Player Speed Toggle and Slider

-- Player Speed Toggle and Slider with Input
local speedEnabled = false
local desiredSpeed = 16 -- Default speed
local defaultSpeed = 16 -- Default Roblox speed
local player = game.Players.LocalPlayer

-- Function to set player speed
local function setSpeed(speed)
    if player and player.Character and player.Character:FindFirstChild("Humanoid") then
        player.Character.Humanoid.WalkSpeed = speed
    end
end

-- Monitor speed to ensure it persists
local function monitorSpeed()
    while speedEnabled do
        if player and player.Character and player.Character:FindFirstChild("Humanoid") then
            if player.Character.Humanoid.WalkSpeed ~= desiredSpeed then
                setSpeed(desiredSpeed)
            end
        end
        task.wait(0.1)
    end
end

-- Speed Toggle
local SpeedToggle = Tabs.MISC:AddToggle("SpeedToggle", { Title = "Enable Player Speed", Default = false })
SpeedToggle:OnChanged(function()
    speedEnabled = SpeedToggle.Value
    if speedEnabled then
        task.spawn(monitorSpeed)
    else
        -- Reset to default speed when toggle is off
        setSpeed(defaultSpeed)
    end
end)

-- Speed Slider
local SpeedSlider = Tabs.MISC:AddSlider("SpeedSlider", {
    Title = "Player Speed",
    Description = "Adjust your walk speed",
    Default = 16,
    Min = 1,
    Max = 20,
    Rounding = 0,
    Callback = function(Value)
        desiredSpeed = Value
        if speedEnabled then
            setSpeed(desiredSpeed)
        end
    end,
})
SpeedSlider:SetValue(16)

-- Speed Input
local SpeedInput = Tabs.MISC:AddInput("SpeedInput", {
    Title = "Set Speed",
    Placeholder = "Enter speed (1-20)",
    Numeric = true,
    Finished = true, -- Callback triggers when Enter is pressed
    Callback = function(Value)
        local inputSpeed = tonumber(Value)
        if inputSpeed and inputSpeed >= 1 and inputSpeed <= 20 then
            desiredSpeed = inputSpeed
            SpeedSlider:SetValue(inputSpeed)
            if speedEnabled then
                setSpeed(desiredSpeed)
            end
        end
    end,
})

-- Monitor respawn to ensure speed persists
player.CharacterAdded:Connect(function(character)
    if speedEnabled then
        repeat task.wait() until character:FindFirstChild("Humanoid")
        setSpeed(desiredSpeed)
    end
end)

-- Jump Power Toggle and Slider with Input
local jumpEnabled = false
local defaultJumpPower = 50 -- Default Roblox jump power

-- Jump Power Toggle
local JumpToggle = Tabs.MISC:AddToggle("JumpToggle", { Title = "Enable Jump Power", Default = false })
JumpToggle:OnChanged(function()
    jumpEnabled = JumpToggle.Value
    if jumpEnabled then
        if player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.JumpPower = defaultJumpPower
        end
    else
        -- Reset to default jump power when toggle is off
        if player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.JumpPower = defaultJumpPower
        end
    end
end)

-- Jump Power Slider
local JumpSlider = Tabs.MISC:AddSlider("JumpPowerSlider", {
    Title = "Jump Power",
    Description = "Adjust your jump power",
    Default = 50,
    Min = 1,
    Max = 60,
    Rounding = 0,
    Callback = function(Value)
        if jumpEnabled and player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.JumpPower = Value
        end
    end,
})
JumpSlider:SetValue(50)

-- Jump Power Input
local JumpInput = Tabs.MISC:AddInput("JumpInput", {
    Title = "Set Jump Power",
    Placeholder = "Enter jump power (1-60)",
    Numeric = true,
    Finished = true,
    Callback = function(Value)
        local inputJumpPower = tonumber(Value)
        if inputJumpPower and inputJumpPower >= 1 and inputJumpPower <= 60 then
            JumpSlider:SetValue(inputJumpPower)
            if jumpEnabled and player.Character and player.Character:FindFirstChild("Humanoid") then
                player.Character.Humanoid.JumpPower = inputJumpPower
            end
        end
    end,
})





Tabs.HOOK:AddSection("Webhook")

local webhookUrl = ""
local webhookTimer = 600 -- Default to 1 minute in seconds
local webhookEnabled = false
local discordId = "" -- To store the Discord ID to ping



-- Input to change the webhook URL
local InputURL = Tabs.HOOK:AddInput("WebhookInput", {
    Title = "Webhook URL",
    Default = "",
    Placeholder = "Enter your webhook URL",
    Numeric = false,
    Finished = false,
    Callback = function(Value)
        webhookUrl = Value
    end
})

InputURL:OnChanged(function(Value)
    webhookUrl = Value
end)

-- Input to add your Discord ID
local InputDiscordID = Tabs.HOOK:AddInput("DiscordIDInput", {
    Title = "Discord ID",
    Default = "",
    Placeholder = "Enter your Discord ID",
    Numeric = true,
    Finished = false,
    Callback = function(Value)
        discordId = Value
    end
})

InputDiscordID:OnChanged(function(Value)
    discordId = Value
end)

-- Input to change the delay time
local InputDelay = Tabs.HOOK:AddInput("DelayInput", {
    Title = "Interval (Seconds)",
    Default = "7200",
    Placeholder = "Enter interval in seconds",
    Numeric = true,
    Finished = false,
    Callback = function(Value)
        local numValue = tonumber(Value)
        if numValue and numValue > 0 then
            webhookTimer = numValue
        end
    end
})

InputDelay:OnChanged(function(Value)
    local numValue = tonumber(Value)
    if numValue and numValue > 0 then
        webhookTimer = numValue
    end
end)

-- Toggle to activate/deactivate webhook sending
local Toggle = Tabs.HOOK:AddToggle("WebhookToggle", { Title = "Enable Webhook", Default = false })

Toggle:OnChanged(function()
    webhookEnabled = Toggle.Value
    if webhookEnabled then
        task.spawn(function()
            while webhookEnabled do
                if webhookUrl ~= "" then
                    local content = discordId ~= "" and ("<@" .. discordId .. ">") or "Webhook sent successfully!"
                    local data = {
                        ["content"] = content,
                        ["embeds"] = {{
                            ["title"] = "Sol's RNG Eon1",
                            ["description"] = "Webhook activated!",
                            ["color"] = 65280, -- Green color
                            ["fields"] = {
                                {
                                    ["name"] = "⏰ Time:",
                                    ["value"] = os.date("!%a %b %d %X %Y", os.time() + 7 * 3600) -- GMT+7 timezone
                                }
                            }
                        }}
                    }

                    local jsonData = game:GetService("HttpService"):JSONEncode(data)
                    request({
                        Url = webhookUrl,
                        Method = "POST",
                        Headers = { ["Content-Type"] = "application/json" },
                        Body = jsonData
                    })
                end
                task.wait(webhookTimer)
            end
        end)
    end
end)   Headers = { ["Content-Type"] = "application/json" },
                        Body = jsonData
                    })
                end
                task.wait(webhookTimer)
            end
        end)
    end
end)
